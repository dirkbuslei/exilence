// <auto-generated />
using System;
using Exilence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exilence.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Exilence.Models.Connection.ConnectionModel", b =>
                {
                    b.Property<string>("ConnectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ConnectedDate");

                    b.Property<string>("PartyName");

                    b.HasKey("ConnectionId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Exilence.Models.Ladder.LadderStoreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Finished");

                    b.Property<string>("Name");

                    b.Property<bool>("Running");

                    b.Property<DateTime>("Started");

                    b.HasKey("Id");

                    b.ToTable("Ladders");
                });

            modelBuilder.Entity("Exilence.Models.LadderPlayerDepthModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Group");

                    b.Property<int>("Solo");

                    b.HasKey("Id");

                    b.ToTable("LadderPlayerDepthModel");
                });

            modelBuilder.Entity("Exilence.Models.LadderPlayerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Class");

                    b.Property<bool>("Dead");

                    b.Property<int?>("DepthId");

                    b.Property<long>("Experience");

                    b.Property<long>("ExperiencePerHour");

                    b.Property<int?>("LadderStoreModelId");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<bool>("Online");

                    b.Property<int?>("RankId");

                    b.Property<string>("Twitch");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("DepthId");

                    b.HasIndex("LadderStoreModelId");

                    b.HasIndex("RankId");

                    b.ToTable("LadderPlayerModel");
                });

            modelBuilder.Entity("Exilence.Models.LadderPlayerRankModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Class");

                    b.Property<int>("Depth");

                    b.Property<int>("Overall");

                    b.HasKey("Id");

                    b.ToTable("LadderPlayerRankModel");
                });

            modelBuilder.Entity("Exilence.Models.LadderPlayerModel", b =>
                {
                    b.HasOne("Exilence.Models.LadderPlayerDepthModel", "Depth")
                        .WithMany()
                        .HasForeignKey("DepthId");

                    b.HasOne("Exilence.Models.Ladder.LadderStoreModel")
                        .WithMany("Ladder")
                        .HasForeignKey("LadderStoreModelId");

                    b.HasOne("Exilence.Models.LadderPlayerRankModel", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");
                });
#pragma warning restore 612, 618
        }
    }
}
